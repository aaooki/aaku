#!/usr/bin/env zsh

BASEDIR="$(cd "$(dirname "${ZSH_SOURCE[0]}")" && pwd)"

link_config() {
  src=$1
  dst=$2

  rm -rf $HOME/$dst
  ln -sfn ${BASEDIR}/$src $HOME/$dst
}

link_dev() {
  link_config vim/vim    .vim
  link_config vim/vimrc  .vimrc
  link_config vim/gvimrc .gvimrc

  link_config nvim .config/nvim

  link_config zsh/zsh      .zsh
  link_config zsh/zprofile .zprofile
  link_config zsh/zshenv   .zshenv
  link_config zsh/zshrc    .zshrc

  link_config tmux/tmux.conf    .tmux.conf
  link_config git/gitconfig     .gitconfig
  link_config git/gitignore     .gitignore
  link_config git/gitattributes .gitattributes
  link_config ruby/irbrc        .irbrc
  link_config scheme/csirc      .csirc
  link_config rg/rgignore       .rgignore
  link_config ctags/ctags       .ctags

  link_config alacritty .config/alacritty

  echo "Installing Vim plugins..."
  vim -E -c PlugInstall  -c qall
  vim -c 'CocInstall -sync coc-go coc-tsserver coc-html coc-css coc-emmet coc-solargraph|q'

  echo "Source Zsh files"
  source $HOME/.zshrc
}

link_linux() {
  link_config bin/fehbg      .fehbg
  link_config X11/xinitrc    .xinitrc
  link_config X11/Xresources .Xresources
  link_config rofi           .config/rofi
  link_config dunst          .config/dunst
  link_config picom          .config/picom
  link_config fontconfig     .config/fontconfig
  link_config zathura        .config/zathura
}

link_macos() {}

link_cli_tools() {
  link_config nnn      .config/nnn
  link_config newsboat .newsboat
  link_config cmus     .config/cmus
  link_config irssi    .irssi
}

link_fonts() {
  echo "Installing Fonts..."
  [ -d $HOME/Workspace/fonts/ ] && exit
  git clone https://github.com/powerline/fonts.git $HOME/Workspace/fonts/
  pushd $HOME/Workspace/fonts && ./install.sh && popd

  git clone https://github.com/sebastiencs/icons-in-terminal.git $HOME/Workspace/fonts/icons-in-terminal
  pushd $HOME/Workspace/fonts/icons-in-terminal && ./install.sh && popd
}

echo "Creating Workspace..."
# mkdir $HOME/Workspace

echo "Updating submodules..."
# git submodule update --init --recursive --remote

if [ $# -eq 0 ]; then
  echo "Installing all..."
  link_dev
  link_linux
  link_macos
  link_cli_tools
  link_fonts
elif [[ condition ]]; then
  while test $# -gt 0
  do
    case "$1" in
      dev)
        echo "Installing dev..."
        link_dev
        ;;
      linux)
        echo "Installing linux..."
        link_linux
        ;;
      macos)
        echo "Installing macos..."
        link_macos
        ;;
      cli)
        echo "Installing cli..."
        link_cli_tools
        ;;
      fonts)
        echo "Installing fonts..."
        link_fonts
        ;;
      *)
        echo "Usage: $0 [*|dev|linux|macos|cli|fonts]"
        ;;
    esac
    shift
  done
fi
