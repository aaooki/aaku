set nocompatible              "no compatibility with legacy vi

"Plugins
call plug#begin('~/.vim/plugins')
Plug 'rking/ag.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-surround'
Plug 'junegunn/vim-easy-align'
Plug 'christoomey/vim-system-copy'
Plug 'junegunn/goyo.vim'
Plug 'w0ng/vim-hybrid'
Plug 'tpope/vim-rails'
Plug 'fatih/vim-go'
Plug 'rhysd/vim-crystal'
Plug 'kchmck/vim-coffee-script'
Plug 'leafgarland/typescript-vim'
Plug 'mattn/emmet-vim'
call plug#end()

set encoding=utf-8
set lazyredraw
set ttimeout
set ttimeoutlen=50
set nobackup
set noswapfile
set autoread                        "automatically read changes in the file
set showcmd                         "display incomplete commands
set shell=zsh
set wildmenu
set wildmode=longest:full,full
set completeopt=longest,menuone,preview
set mouse=a
set path+=**
set history=777
set undolevels=777
set laststatus=2                    "always display the status bar
set hidden                          "hide buffers instead of closing them
set nowrap                          "disable soft wrap for lines
set scrolloff=2
set ruler
set number
set cursorline                      "highlight current line
set colorcolumn=81
set splitbelow
set splitright

set incsearch
set ignorecase                      "searches are case insensitive...
set smartcase                       " ..unless they contain at least one capital letter
set gdefault                        "substitue globally on a line (no need to type `g`)
set hlsearch

set autoindent                      "always set autoindenting on
set backspace=indent,eol,start      "backspace through everything in insert mode
set formatoptions-=cro              "disable auto comments on new lines
set tabstop=2
set expandtab                       "use spaces, not tabs
set shiftwidth=2
set softtabstop=2
autocmd FileType c    setlocal ts=4 sts=4 sw=4 noexpandtab
autocmd FileType java setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
"remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

set t_Co=256                        "enable 256 colors
set background=dark
colorscheme hybrid
highlight Normal ctermbg=black
"status line
set statusline=%=%m\ %c\ %P\ %f\    "modifiedflag, charcount, filepath, filepercent
highlight StatusLine   ctermfg=235 ctermbg=240
highlight StatusLineNC ctermfg=235 ctermbg=237
"remove current line highlight in unfocused window
au VimEnter,WinEnter,BufWinEnter,FocusGained,CmdwinEnter * set cul
au WinLeave,FocusLost,CmdwinLeave * set nocul

"The Leader
let mapleader="\<Space>"

nnoremap ! :!
nnoremap <leader>w :w<cr>
"replace the word under cursor
nnoremap <leader>* :%s/\<<c-r><c-w>\>//<left>
"toggle showing hidden characters
nnoremap <silent> <leader>s :set nolist!<cr>
"toggle spell checking
nnoremap <leader>ss :setlocal spell!<cr>
"toggle RTL mode
nnoremap <silent> <leader>l :set rl!<cr>
"override file systems by typing :w!!
cnoremap w!! %!sudo tee > /dev/null %
"remove search highlight
nmap <leader>q :nohlsearch<CR>

"move lines around
nnoremap <leader>k :m-2<cr>==
nnoremap <leader>j :m+<cr>==
xnoremap <leader>k :m-2<cr>gv=gv
xnoremap <leader>j :m'>+<cr>gv=gv

"keep text selected after indentation
vnoremap < <gv
vnoremap > >gv

"Ag
let g:ag_working_path_mode="r"      "search from the project root instead of cwd
nnoremap \  :Ag!<space>
nnoremap \| :Ag! "\b<C-R><C-W>\b"<cr>:cw<cr>

"CtrlP
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command='ag %s -l --nocolor --hidden -g ""'
  let g:ctrlp_use_caching=0
endif
let g:ctrlp_map = ''
nnoremap <leader>p :CtrlP<cr>
nnoremap <leader>o :CtrlPLine<cr>
nnoremap <leader>t :CtrlPTag<cr>
nnoremap <leader>r :CtrlPBuffer<cr>

"Ctags
set tags+=.git/tags
nnoremap <leader>ct :!ctags --tag-relative --extra=+f -Rf .git/tags --exclude=.git,pkg --languages=-javascript,sql<cr><cr>

"GitGutter
nnoremap <c-N> :GitGutterNextHunk<CR>
nnoremap <c-P> :GitGutterPrevHunk<CR>
nnoremap <c-U> :GitGutterUndoHunk<CR>

nnoremap <leader>T :enew<cr>
nnoremap <Tab> :bnext<cr>
nnoremap <S-Tab> :bprevious<cr>
nnoremap <leader>bq :bp <bar> bd! #<cr>
nnoremap <leader>ba :bufdo bd!<cr>
"cycle between last two open buffers
nnoremap <leader><leader> <c-^>

"EasyAlign
nmap <leader>a <Plug>(EasyAlign)
xmap <leader>a <Plug>(EasyAlign)

nnoremap <silent> <C-h> :call WinMove('h')<cr>
nnoremap <silent> <C-j> :call WinMove('j')<cr>
nnoremap <silent> <C-k> :call WinMove('k')<cr>
nnoremap <silent> <C-l> :call WinMove('l')<cr>
"move to the window in the direction shown, or create a new window
function! WinMove(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr())
    if (match(a:key,'[jk]'))
      wincmd v
    else
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction

"netrw
let g:netrw_banner=0
let g:netrw_winsize=20
let g:netrw_liststyle=3
let g:netrw_localrmdir='rm -r'

"Goyo
nnoremap <leader>g :Goyo<cr>
if !exists('*s:goyo_leave')
  function s:goyo_leave()
    source $MYVIMRC
  endfunction
endif
autocmd! User GoyoLeave nested call <SID>goyo_leave()
