set nocompatible              "no compatibility with legacy vi

"Plugins
call plug#begin('~/.vim/plugins')
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'
Plug 'tomtom/tcomment_vim'
Plug 'machakann/vim-sandwich'
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-endwise'
Plug 'christoomey/vim-system-copy'
Plug 'junegunn/goyo.vim'
Plug 'aonemd/kuroi.vim'
Plug 'andreypopp/vim-colors-plain'
Plug 'tpope/vim-rails'
Plug 'fatih/vim-go'
Plug 'neovimhaskell/haskell-vim'
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'leafgarland/typescript-vim'
Plug 'posva/vim-vue'
Plug 'mattn/emmet-vim'
Plug 'calebsmith/vim-lambdify'
call plug#end()

set encoding=utf-8
set lazyredraw
set ttyfast
set ttimeout
set ttimeoutlen=50
set updatetime=100
set nobackup
set noswapfile
set viminfo+=n/tmp/.viminfo
set autoread                        "automatically read changes in the file
set showcmd                         "display incomplete commands
set shell=zsh
set wildmenu
set wildmode=longest:full,full
set completeopt=longest,menuone,preview
set mouse=a
set path+=**
set complete-=i
set history=777
set undolevels=777
set laststatus=2                    "always display the status bar
set hidden                          "hide buffers instead of closing them
set nowrap                          "disable soft wrap for lines
set scrolloff=2
set ruler
set number
set cursorline                      "highlight current line
set colorcolumn=81
set splitbelow
set splitright
set termwinsize=15x

set incsearch
set ignorecase                      "searches are case insensitive...
set smartcase                       " ..unless they contain at least one capital letter
set gdefault                        "substitue globally on a line (no need to type `g`)
set hlsearch

set autoindent                      "always set autoindenting on
set backspace=indent,eol,start      "backspace through everything in insert mode
set formatoptions-=cro              "disable auto comments on new lines
set tabstop=2
set expandtab                       "use spaces, not tabs
set shiftwidth=2
set softtabstop=2

autocmd! FileType c      setlocal ts=4 sts=4 sw=4 noexpandtab
autocmd! FileType java   setlocal ts=4 sts=4 sw=4 expandtab
autocmd! FileType make   setlocal ts=8 sts=8 sw=8 noexpandtab
autocmd! FileType ruby   setlocal makeprg=ruby\ %
autocmd! FileType go     setlocal makeprg=go\ run\ %
autocmd! FileType scheme setlocal makeprg=chicken-csi\ -s\ %
autocmd! FileType *.h    setlocal filetype=c
autocmd! FileType vue    syntax sync fromstart

set background=dark
set t_Co=256                          "or enable true colors: set termguicolors

colorscheme kuroi

"status line
set statusline=%=%m\ %c\ %P\ %f\    "modifiedflag, charcount, filepercent, filepath

"remove current line highlight in unfocused window
autocmd! VimEnter,WinEnter,BufWinEnter,FocusGained,CmdwinEnter * set cul
autocmd! WinLeave,FocusLost,CmdwinLeave * set nocul

"The Leader
let mapleader="\<Space>"

"execute silent commands
command! -nargs=1 SilentCmd execute 'silent !' . <q-args> | execute 'redraw!'
nnoremap <leader>e :SilentCmd<space>
nnoremap <leader>d :SilentCmd tsk<space>

nnoremap ! :!
nnoremap <leader>w :w<cr>
nnoremap <leader>m :make<cr>
"replace the word under cursor
nnoremap <leader>* :%s/\<<c-r><c-w>\>//<left>
"toggle showing hidden characters
nnoremap <silent> <leader>s :set nolist!<cr>
"toggle spell checking
nnoremap <leader>ss :setlocal spell!<cr>
"toggle RTL mode
nnoremap <silent> <leader>l :set rl!<cr>
"override file systems by typing :w!!
cnoremap w!! %!sudo tee > /dev/null %
"remove search highlight
nmap <leader>q :nohlsearch<CR>
"execute and replace current line in $SHELL with the output
nnoremap Q !!$SHELL<cr>
"set cwd to the directory of the current file
nnoremap <leader>cd :lcd %:p:h<cr>

"move lines around
nnoremap <leader>k :m-2<cr>==
nnoremap <leader>j :m+<cr>==
xnoremap <leader>k :m-2<cr>gv=gv
xnoremap <leader>j :m'>+<cr>gv=gv

"autoclose parenthesis
inoremap ( ()<Left>
inoremap { {}<Left>
inoremap [ []<Left>
inoremap " ""<Left>

"keep text selected after indentation
vnoremap < <gv
vnoremap > >gv

"resize Vim on Tmux split
autocmd! VimResized * :wincmd =

"fzf
let g:fzf_layout = { 'down': '~30%' }

nnoremap <leader>p :FZF<cr>
nnoremap <leader>o :Lines<cr>
nnoremap <leader>t :Tags<cr>
nnoremap <leader>r :Buffers<cr>

nnoremap \  :Ag<space>
nnoremap \| :Ag <C-R><C-W><cr>:cw<cr>

"Ctags
set tags+=.git/tags
nnoremap <leader>ct :!ctags --tag-relative=yes --extras=+f -Rf .git/tags --exclude={.git,pkg,node_modules,public} --languages=-javascript,sql --append<cr><cr>

"Signify
nmap <c-n> <plug>(signify-next-hunk)
nmap <c-p> <plug>(signify-prev-hunk)

nnoremap <leader>T :enew<cr>
nnoremap <Tab> :bnext<cr>
nnoremap <S-Tab> :bprevious<cr>
nnoremap <leader>bq :bp <bar> bd! #<cr>
nnoremap <leader>ba :bufdo bd!<cr>
"cycle between last two open buffers
nnoremap <leader><leader> <c-^>

"EasyAlign
nmap <leader>a <Plug>(EasyAlign)
xmap <leader>a <Plug>(EasyAlign)

nnoremap <silent> <C-h> :call WinMove('h')<cr>
nnoremap <silent> <C-j> :call WinMove('j')<cr>
nnoremap <silent> <C-k> :call WinMove('k')<cr>
nnoremap <silent> <C-l> :call WinMove('l')<cr>
"move to the window in the direction shown, or create a new window
function! WinMove(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr())
    if (match(a:key,'[jk]'))
      wincmd v
    else
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction

"netrw
let g:netrw_banner=0
let g:netrw_winsize=15
let g:netrw_liststyle=3
let g:netrw_localrmdir='rm -r'
nnoremap <leader>n :Lexplore<CR>

"Goyo
nnoremap <leader>g :Goyo<cr>
if !exists('*s:goyo_leave')
  function s:goyo_leave()
    source $MYVIMRC
  endfunction
endif
autocmd! User GoyoLeave nested call <SID>goyo_leave()

"trailing whitespace
function! StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    let w:winview = winsaveview()
    normal Hmy
    %s/\(\s\+$\)\|\($\n\s*\)\+\%$//e
    normal 'yz<CR>
    if exists('w:winview') | call winrestview(w:winview) | endif
  endif
endfunction
autocmd! BufWritePre * call StripTrailingWhitespace()

"smooth scroll
nnoremap <silent> <c-u> :call <sid>SmoothScroll(1)<cr>
nnoremap <silent> <c-d> :call <sid>SmoothScroll(0)<cr>
function! s:SmoothScroll(up)
  execute "normal " . (a:up ? "\<c-y>" : "\<c-e>")
  redraw
  for l:count in range(3, &scroll, 2)
    sleep 7m
    execute "normal " . (a:up ? "\<c-y>" : "\<c-e>")
    redraw
  endfor
  " bring the cursor in the middle of screen
  execute "normal M"
endfunction
